---------------------- 
UNZIP SCRIPT
---------------------- 
import os
import zipfile

local_zip = 'telco-customer-churn.zip'

zip_ref = zipfile.ZipFile(local_zip, 'r')

zip_ref.extractall('')
zip_ref.close()
----------------------
MAPPING gender and columns with YES NO values
----------------------
import pandas as pd

def azureml_main(dataframe1=None, dataframe2=None):

    if dataframe1 is not None and isinstance(dataframe1, pd.DataFrame):

        gender_mapping = {
            'Male': 1,
            'Female': 0
        }

        value_mapping = {
            'Yes': 1,
            'No': 0
        }

        dataframe1['gender'] = dataframe1['gender'].map(gender_mapping)

        columns_to_map = ['Partner', 'Dependents', 'PhoneService', 'PaperlessBilling', 'Churn']
        for column in columns_to_map:
            dataframe1[column] = dataframe1[column].map(value_mapping)

    return dataframe1
----------------------
MAPPING columns with 3 or more values into numeric values
----------------------
import pandas as pd

def azureml_main(dataframe1=None, dataframe2=None):

    if dataframe1 is not None and isinstance(dataframe1, pd.DataFrame):

        value_mapping_internet = {
            'No internet service': 0,
            'No': 1,
            'Yes': 2
        }

        value_mapping_phone = {
            'No phone service': 0,
            'No': 1,
            'Yes': 2
        }

        value_mapping_internetService = {
            'DSL': 0,
            'No': 1,
            'Fiber optic': 2,
        }

        value_mapping_contract = {
            'Month-to-month': 0,
            'One year': 1,
            'Two year': 2
        }

        value_mapping_paymentMethod = {
            'Electronic check': 0,
            'Mailed check': 1,
            'Bank transfer (automatic)': 2,
            'Credit card (automatic)': 3
        }
        
        dataframe1['MultipleLines'] = dataframe1['MultipleLines'].map(value_mapping_phone)
        dataframe1['InternetService'] = dataframe1['InternetService'].map(value_mapping_internetService)
        dataframe1['Contract'] = dataframe1['Contract'].map(value_mapping_contract)
        dataframe1['PaymentMethod'] = dataframe1['PaymentMethod'].map(value_mapping_paymentMethod)

        columns_to_map = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV','StreamingMovies']
        for column in columns_to_map:
            dataframe1[column] = dataframe1[column].map(value_mapping_internet)

    return dataframe1
----------------------
Select K Best
----------------------
import pandas as pd
from sklearn.feature_selection import SelectKBest, f_classif

def azureml_main(dataframe1=None, dataframe2=None):

    if dataframe1 is not None and isinstance(dataframe1, pd.DataFrame):
        
        X_train = dataframe1.iloc[:, :-1]  
        y_train = dataframe1.iloc[:, -1]  

        selector_kbest = SelectKBest(score_func=f_classif, k=10)

        X_kbest = selector_kbest.fit_transform(X_train, y_train)

        selected_indices_kbest = selector_kbest.get_support()
        selected_columns_kbest = list(X_train.columns[selected_indices_kbest]) + ['Churn']

        df_selected_kbest = dataframe1[selected_columns_kbest]

        dataframe1 = df_selected_kbest

    return dataframe1
----------------------
Placing CHURN as last column
----------------------
import pandas as pd

def azureml_main(dataframe1=None, dataframe2=None):

    if dataframe1 is not None and isinstance(dataframe1, pd.DataFrame):
        
        target_column = 'Churn'
        
        column_order = [col for col in dataframe1.columns if col != target_column] + [target_column]

        dataframe1 = dataframe1[column_order]

    return dataframe1
----------------------
Connecting Model statistics into one dataframe
----------------------
import pandas as pd

def azureml_main(dataframe1 = None, dataframe2 = None):

    print(f'Input pandas.DataFrame #1: {dataframe1}')
    print(f'Input pandas.DataFrame #2: {dataframe2}')

    dataframe1['Source'] = 'SVM'
    dataframe2['Source'] = 'Loggistic Regression'

    combined_dataframe = pd.concat([dataframe1, dataframe2], axis=0, ignore_index=True)

    return combined_dataframe,

----------------------
Connecting Model statistics into one dataframe
----------------------
import pandas as pd

def azureml_main(dataframe1 = None, dataframe2 = None):

    print(f'Input pandas.DataFrame #1: {dataframe1}')
    print(f'Input pandas.DataFrame #2: {dataframe2}')

    dataframe2['Source'] = 'Decision Forest'

    combined_dataframe = pd.concat([dataframe1, dataframe2], axis=0, ignore_index=True)

    return combined_dataframe,

----------------------
Returning values from Endpoint
----------------------

import pandas as pd
    
def azureml_main(dataframe1 = None, dataframe2 = None):
    scored_results = dataframe1[['Scored Labels', 'Scored Probabilities']]
    scored_results.rename(columns={'Scored Labels':'ChurnPrediction','Scored Probabilities':'Probability'}, inplace=True)
    return scored_results
